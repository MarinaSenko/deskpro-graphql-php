[2018-01-29 14:30:05] GraphQL.DEBUG: {     content_get_news(id: 1) {         title         content         status     }      content_get_articles(id: 100) {         title         content     } } [] []
[2018-01-29 14:31:37] GraphQL.DEBUG: {     content_get_news(id: 1) {         title         content         status     }      content_get_articles(id: 100) {         title         content     } } [] []
[2018-01-29 14:38:47] GraphQL.DEBUG: {     content_get_news(id: 1) {         title         content     }      content_get_articles(id: 100) {         title         content     } } [] []
[2018-01-29 14:40:34] GraphQL.DEBUG: query {     content_get_news(id: 1) {         title         content     }      content_get_articles(id: 100) {         title         content     } } [] []
[2018-01-29 14:42:48] GraphQL.DEBUG: query {     content_get_news(id: 1) {         title         content     }      content_get_articles(id: 100) {         title         content     } } [] []
[2018-01-29 14:45:42] GraphQL.DEBUG: query {  }mutation {  } [] []
[2018-01-29 14:46:48] GraphQL.DEBUG: {"query":"query {\n\n}mutation {\n\n}","variables":[]} [] []
[2018-01-29 14:47:25] GraphQL.DEBUG: query {  }mutation {  } [] []
[2018-01-29 14:48:26] GraphQL.DEBUG: mutation {  } [] []
[2018-01-29 14:49:03] GraphQL.DEBUG: mutation {  } [] []
[2018-01-29 14:49:20] GraphQL.DEBUG: mutation {     content_update_articles(id: 100, article: {"title":"Happy GraphQL!"}) {              } } [] []
[2018-01-29 14:50:40] GraphQL.DEBUG: mutation {     content_update_articles(id: 100, article: title: "Happy GraphQL!") {              } } [] []
[2018-01-29 14:51:11] GraphQL.DEBUG: mutation {     content_update_articles(id: 100, article: { title: "Happy GraphQL!" }) {              } } [] []
[2018-01-29 14:52:45] GraphQL.DEBUG: mutation {     content_update_articles(id: 100, article: { title: "Happy GraphQL!" }) } [] []
[2018-01-29 14:54:37] GraphQL.DEBUG: mutation {     content_update_articles(id: 100, article: { title: "Happy GraphQL!" }) } [] []
[2018-01-29 14:55:22] GraphQL.DEBUG: mutation { content_update_articles(id: 100, article: { title: "Happy GraphQL!" }) } [] []
[2018-01-29 14:57:23] GraphQL.DEBUG: mutation {     content_update_articles(id: 100, article: { title: "Happy GraphQL!" }) } [] []
[2018-01-29 14:58:40] GraphQL.DEBUG: mutation {     content_update_articles(id: 100, article: { title: "Happy GraphQL!" }) } [] []
[2018-01-29 14:59:07] GraphQL.DEBUG: mutation {     content_update_articles(id: 100, article: { title: "Happy GraphQL!" }) } [] []
[2018-01-29 14:59:35] GraphQL.DEBUG: query {     content_get_articles(id: 100) {         title         content     } }mutation {     content_update_articles(id: 100, article: { title: "Happy GraphQL!" }) } [] []
[2018-01-29 14:59:52] GraphQL.DEBUG: mutation {     content_update_articles(id: 100, article: { title: "Happy GraphQL!" }) } [] []
[2018-01-29 15:00:12] GraphQL.DEBUG: query {     content_get_news(id: 1) {         title         content     }      content_get_articles(id: 100) {         title         content     } } [] []
[2018-01-29 15:10:16] GraphQL.DEBUG: query {     content_get_news(id: 1) {         title         content     }      content_get_articles(id: 100) {         title         content     } } [] []
[2018-01-29 15:13:36] GraphQL.DEBUG: query {     ContentGetNews {         content_get_news(id: 1) {             title             content         }     }      ContentGetArticles {         content_get_articles(id: 100) {             title             content         }     } } [] []
[2018-01-29 15:47:33] GraphQL.DEBUG: query GetNews {     content_get_news(id: 1) {             title             content     }      content_get_articles(id: 100) {             title             content     } } [] []
[2018-01-29 15:48:20] GraphQL.DEBUG: query GetNews {     content_get_news(id: 1) {             title             content     }      content_get_articles(id: 100) {             title             content     } } [] []
[2018-01-29 15:49:05] GraphQL.DEBUG: query GetNews {     content_get_news(id: 1) {             title             content     }      content_get_articles(id: 100) {             title             content     } } [] []
[2018-01-29 15:49:20] GraphQL.DEBUG: query GetNews {     content_get_news(id: 1) {             title             content     }      content_get_articles(id: 100) {             title             content     } } [] []
[2018-01-29 16:26:36] GraphQL.DEBUG: query GetNews {     content_get_news(id: 1) {             title             content     }      content_get_articles(id: 100) {             title             content     } } [] []
[2018-01-29 16:26:51] GraphQL.DEBUG: query GetNews {     content_get_news(id: 1) {             title             content     }      content_get_articles(id: 100) {             title             content     } } [] []
[2018-01-29 16:26:58] GraphQL.DEBUG: query GetNews {     content_get_news(id: 1) {             title             content     }      content_get_articles(id: 100) {             title             content     } } [] []
[2018-01-29 16:32:44] GraphQL.DEBUG: query GetNews {     news1: content_get_news(id: 1) {             title             content     }      news2: content_get_articles(id: 100) {             title             content     } } [] []
[2018-01-29 18:08:07] GraphQL.DEBUG: query GetNews ($id: Int) {     content_get_news(id: 1) {             title             content     } } [] []
[2018-01-29 18:12:35] GraphQL.DEBUG: query GetNews ($id: Int) {     content_get_news(id: 1) {             title             content     } } [] []
[2018-01-29 18:16:56] GraphQL.DEBUG: query GetNews ($id: Int) {     content_get_news(id: 1) {             title             content     } } [] []
[2018-01-29 18:20:06] GraphQL.DEBUG: query GetNews ($id: Int) {     content_get_news(id: 1) {             title             content     } } {"id":1} []
[2018-01-29 18:24:18] GraphQL.DEBUG: query GetNews ($id: Int) {     content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 18:26:57] GraphQL.DEBUG: query GetNews ($id: ID) {     content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 18:33:17] GraphQL.DEBUG: query GetNews ($id: ID!) {     content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 18:35:20] GraphQL.DEBUG: query GetNews ($id: ID!) {     content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 18:43:12] GraphQL.DEBUG: query GetNews ($id: ID!) {     content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 19:07:53] GraphQL.DEBUG: query GetNews ($id: ID!) {     content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 19:09:21] GraphQL.DEBUG: query GetNews ($id: ID!) {     content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 19:20:21] GraphQL.DEBUG: query GetNews ($id: ID!) {     content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 19:22:38] GraphQL.DEBUG: query GetNews ($id: ID!) {     content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 19:22:52] GraphQL.DEBUG: query GetNews ($id: ID!) {     content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 19:23:34] GraphQL.DEBUG: query GetNews ($id: ID!) {     content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 19:24:10] GraphQL.DEBUG: query GetNews ($id: ID!) {     content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 19:25:07] GraphQL.DEBUG: query GetNews ($id: ID!) {     content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 19:28:12] GraphQL.DEBUG: query GetNews ($id: ID!, $id2: ID!) {     news1: content_get_news(id: $id) {             title             content     }      news2: content_get_news(id: $id2) {             title             content     } } {"id":1,"id2":2} []
[2018-01-29 19:29:16] GraphQL.DEBUG: query GetNews ($id: ID!, $id2: ID!) {     news1: content_get_news(id: $id) {             title             content     } } {"id":1,"id2":2} []
[2018-01-29 19:29:22] GraphQL.DEBUG: query GetNews ($id: ID!) {     news1: content_get_news(id: $id) {             title             content     } } {"id":1,"id2":2} []
[2018-01-29 19:29:41] GraphQL.DEBUG: query GetNews ($id: ID!) {     news1: content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 19:29:41] GraphQL.DEBUG: query GetNews ($id: ID!) {     news1: content_get_news(id: $id) {             title             content     } } {"id":2} []
[2018-01-29 19:30:11] GraphQL.DEBUG: query GetNews ($id: ID!) {     news1: content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 19:30:11] GraphQL.DEBUG: query GetNews ($id: ID!) {     news1: content_get_news(id: $id) {             title             content     } } {"id":2} []
[2018-01-29 19:30:11] GraphQL.DEBUG: query GetNews ($id: ID!) {     news1: content_get_news(id: $id) {             title             content     } } {"id":3} []
[2018-01-29 19:30:38] GraphQL.DEBUG: query GetNews ($id: ID!) {     news1: content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 19:30:38] GraphQL.DEBUG: query GetNews ($id: ID!) {     news1: content_get_news(id: $id) {             title             content     } } {"id":2} []
[2018-01-29 19:30:38] GraphQL.DEBUG: query GetNews ($id: ID!) {     news1: content_get_news(id: $id) {             title             content     } } {"id":3} []
[2018-01-29 19:31:00] GraphQL.DEBUG: query GetNews ($id: ID!) {     content_get_news(id: $id) {             title             content     } } {"id":1} []
[2018-01-29 19:31:00] GraphQL.DEBUG: query GetNews ($id: ID!) {     content_get_news(id: $id) {             title             content     } } {"id":2} []
[2018-01-29 19:31:00] GraphQL.DEBUG: query GetNews ($id: ID!) {     content_get_news(id: $id) {             title             content     } } {"id":3} []
[2018-01-29 19:37:17] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 19:37:17] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":2}} []
[2018-01-29 19:37:17] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":3}} []
[2018-01-29 19:38:19] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 19:38:19] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 19:38:19] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":2}} []
[2018-01-29 19:38:20] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Similique ex distinctio aut sed","content":"Quick, now!\u0027 And Alice was beginning to get in?\u0027 asked Alice again, in a tone of great dismay, and began staring at the thought that it was empty: she did so, and were resting in the distance, sitting sad and lonely on a little bottle that stood near. The three soldiers wandered about in the."}}} [] []
[2018-01-29 19:38:20] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":3}} []
[2018-01-29 19:38:20] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Eum dignissimos modi sapiente veritatis","content":"Bill, the Lizard) could not join the dance? \u0022You can really have no sort of mixed flavour of cherry-tart, custard, pine-apple, roast turkey, toffee, and hot buttered toast,) she very soon had to pinch it to the other, trying every door, she found a little more conversation with her face brightened."}}} [] []
[2018-01-29 19:45:36] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: [ID!]) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 19:45:36] GraphQL.DEBUG: RESPONSE {"errors":[{"message":"Variable \u0022$id\u0022 of type \u0022[ID!]\u0022 used in position expecting type \u0022ID!\u0022.","category":"graphql","locations":[{"line":1,"column":16},{"line":2,"column":26}]}]} [] []
[2018-01-29 19:46:05] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: [ID]!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 19:46:05] GraphQL.DEBUG: RESPONSE {"errors":[{"message":"Variable \u0022$id\u0022 of type \u0022[ID]!\u0022 used in position expecting type \u0022ID!\u0022.","category":"graphql","locations":[{"line":1,"column":16},{"line":2,"column":26}]}]} [] []
[2018-01-29 19:50:41] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 19:50:41] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 19:52:11] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 19:52:11] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 19:55:00] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 19:55:00] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 19:56:02] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 19:56:02] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 19:58:43] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 19:58:43] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 20:02:37] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    nws: content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 20:02:37] GraphQL.DEBUG: RESPONSE {"data":{"nws":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 20:04:36] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 20:04:36] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 20:13:21] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 20:13:21] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 20:14:35] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 20:14:35] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 20:15:47] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    news: content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 20:15:47] GraphQL.DEBUG: RESPONSE {"data":{"news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 20:18:29] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 20:18:29] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 20:27:19] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 20:27:19] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 20:28:04] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 20:28:04] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 20:29:28] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 20:29:28] GraphQL.DEBUG: RESPONSE {"errors":[{"message":"Syntax Error GraphQL (1:1) Unexpected \u003CEOF\u003E\n\n1: \n   ^\n","category":"graphql","locations":[{"line":1,"column":1}]}]} [] []
[2018-01-29 20:30:06] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 20:30:06] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 20:30:58] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 20:30:58] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 20:35:31] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 20:35:31] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
[2018-01-29 20:47:43] GraphQL.DEBUG: POST http://deskpro-dev.com/api/v2/graphql {"query":"query GetNews ($id: ID!) {\n    content_get_news(id: $id) {\n            title\n            content\n    }\n}","variables":{"id":1}} []
[2018-01-29 20:47:43] GraphQL.DEBUG: RESPONSE {"data":{"content_get_news":{"title":"Example News Post","content":"This is an example news post. Feel free to edit or delete it from the agent interface."}}} [] []
